#!/bin/bash

set -e

function die {
    echo "${PROGNAME}:" "$@" >&2
    exit 1
}

function usage {
    echo "Usage: ${PROGNAME} [--rm]" >&2
    exit 2
}

function user_add {
    local dbfile="$1"
    local username="$2"
    local fullname="$3"
    local password="$4"

    [[ -n "${dbfile}" ]] || die "missing dbfile"
    [[ -n "${username}" ]] || die "missing username"
    [[ -n "${fullname}" ]] || die "missing fullname"
    [[ -n "${password}" ]] || die "missing password"

    local adminflag=""
    if [[ "$5" == "admin" ]]; then
        adminflag="--admin"
    elif [[ -n "$5" ]] ; then
        die "bad admin value"
    fi

    bazel-bin/cmd/db_util/db_util_/db_util user add ${adminflag} \
          "${dbfile}" "${username}" "${fullname}" "${password}"
}

function list_create {
    local dbfile="$1"
    local owner="$2"
    local beneficiary="$3"
    local eventdate="$4"
    local name="$5"

    local activeflag="--active=true"
    if [[ "$6" == "inactive" ]] ; then
        activeflag="--active=false"
    elif [[ -n "$6" ]] ; then
        die "bad active value"
    fi

    [[ -n "${dbfile}" ]] || die "missing dbfile"
    [[ -n "${owner}" ]] || die "missing owner"
    [[ -n "${beneficiary}" ]] || die "missing beneficiary"
    [[ -n "${eventdate}" ]] || die "missing eventdate"
    [[ -n "${name}" ]] || die "missing name"

    bazel-bin/cmd/db_util/db_util_/db_util list create \
          --owner="${owner}" \
          --beneficiary="${beneficiary}" \
          --event_date="${eventdate}" \
          --name="${name}" \
          ${activeflag} \
          "${dbfile}"
}

PROGNAME=$(basename "$0")

GETOPT=getopt
if which brew >/dev/null 2>&1 ; then
    prefix=$(brew --prefix gnu-getopt 2>/dev/null)
    if [[ -n "${prefix}" ]] ; then
	GETOPT="${prefix}/bin/getopt"
    fi
fi

options=$(${GETOPT} -o '' --longoptions rm,load_test_data -- "$@")
[[ $? -ne 0 ]] && usage
eval set -- "$options"
while : ; do
    case "$1" in
        --rm)
            RMVOL=1
            ;;
        --load_test_data)
            LOADTESTDATA=1
            ;;
        --)
            shift
            break
            ;;
    esac
    shift
done

VOL=xmaslist_database

if docker volume inspect ${VOL} >/dev/null 2>&1 ; then
    [[ "$RMVOL" -ne 1 ]] && die "${VOL} exists"
    echo "Removing existing volume ${VOL}"
    docker volume rm ${VOL}
fi

DB_TMPFILE=/tmp/db.sqlite
[[ -f "${DB_TMPFILE}" ]] && rm "${DB_TMPFILE}"

sqlite3 ${DB_TMPFILE} <db/schema/schema.txt
if [[ "${LOADTESTDATA}" -eq 1 ]] ; then
    bazel build cmd/db_util

    user_add ${DB_TMPFILE} a "User A" aa admin
    user_add ${DB_TMPFILE} b "User B" bb

    bazel-bin/cmd/db_util/db_util_/db_util user list ${DB_TMPFILE}

    list_create ${DB_TMPFILE} a aben1 2021-09-06T00:00:00-04:00 "a list 1"
    list_create ${DB_TMPFILE} a aben2 2021-09-15T01:00:00-04:00 "a list 2" inactive
    list_create ${DB_TMPFILE} b bben1 2021-09-17T02:00:00-04:00 "b list 1" inactive
    list_create ${DB_TMPFILE} b bben2 2021-09-18T03:00:00-04:00 "b list 2"

    bazel-bin/cmd/db_util/db_util_/db_util list list ${DB_TMPFILE}
fi

docker volume create ${VOL}
docker container create \
       --name xmaslist_database_create \
       -v ${VOL}:/db \
       alpine
docker cp /tmp/db.sqlite xmaslist_database_create:/db

docker container rm xmaslist_database_create
